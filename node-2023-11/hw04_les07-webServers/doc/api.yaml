openapi: 3.0.3
info:
  title: Best Courses Ever
  description: |-
    Описание API проекта "Best Courses Ever" в формате Swagger
    
  version: 0.0.1
servers:
  - url: https://localhost:3000/
tags:
  - name: admin
    description: Административные операции 
  - name: user
    description: Операции над пользователями
  - name: file
    description: Операции над файлами



paths:
  /admin/users:
    get:
      tags:
        - admin
      summary: Получить административный список рользователей (с паролями))
      description: Данная операция доступна только авторизованному администратору
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/AdminUser'    
    post:
      tags:
        - admin
      summary: Create user
      description: Данная операция доступна только авторизованному администратору
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
          application/xml:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/AdminUser'

  /admin/users/{userId}:
    get:
      tags:
        - admin
      summary: Получить пользователя по ID
      description: Возвращает данные пользователя
      operationId: getAdminUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'          
            application/xml:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '404':
          description: User not found

    put:
      tags:
        - admin
      summary: Обновление данных пользователя
      description: Обновляет данные пользователя
      operationId: putAdminUser
      parameters:
        - name: userId
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
          application/xml:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminUserWithoutId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'          
            application/xml:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found

    delete:
      tags:
        - admin
      summary: Удалить пользователя
      description: Удалить пользователя
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User id to delete
          required: true
          schema:
            type: string
            format: string
      responses:
        '204':
          description: Пользователь удален


  /admin/files:
    get:
      tags:
        - admin
      summary: Получить административный список файлов в хранилище
      description: Данная операция доступна только авторизованному администратору
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
            application/xml:
              schema:
                $ref: '#/components/schemas/File'    

  /api/users:
    get:
      tags:
        - user
      summary: Получить список рользователей (без паролей))
      description: Данная операция доступна только авторизованному администратору
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'    

  /api/users/{userId}:
    get:
      tags:
        - user
      summary: Получить пользователя по ID
      description: Возвращает данные пользователя
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /api/files/{fileId}:
    get:
      tags:
        - file
      summary: Получить файл по ID
      description: Возвращает файл
      operationId: getFileById
      parameters:
        - name: fileId
          in: path
          description: ID of file to return
          required: true
          schema:
            type: string
            format: string
      responses:
        '200':
          description: successful operation
          content:
            application/octet-stream
        '404':
          description: File not found

components:
  schemas:

    AdminUser:
      type: object
      properties:
        _id:
          type: string
          format: mongoose.SchemaTypes.ObjectId
          example: 65ac3ce9dfb85263bcf53829
        name:
          type: string
          example: Peter
        login:
          type: string
          example: peter
        pass:
          type: string
          example: '12345'
      xml:
        name: user

    AdminUserWithoutId:
      type: object
      properties:
        name:
          type: string
          example: Peter
        login:
          type: string
          example: peter
        pass:
          type: string
          example: '12345'
      xml:
        name: user


    User:
      type: object
      properties:
        _id:
          type: string
          format: mongoose.SchemaTypes.ObjectId
          example: 65ac3ce9dfb85263bcf53829
        name:
          type: string
          example: Peter
        login:
          type: string
          example: peter
      xml:
        name: user

    UserWithoutId:
      type: object
      properties:
        name:
          type: string
          example: Peter
        login:
          type: string
          example: peter
        pass:
          type: string
          example: '12345'
      xml:
        name: user

    File:
      type: object
      properties:
        _id:
          type: string
          format: mongoose.SchemaTypes.ObjectId
          example: 65ac3ce9dfb85263bcf53829
        name:
          type: string
          example: 1.mp3
        size:
          type: number
          example: 333
        type:
          type: string
          example: 'audio/mpeg'
      xml:
        name: user

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
